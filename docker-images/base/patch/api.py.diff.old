diff --git a/sortinghat/api.py b/sortinghat/api.py
index 9f4d16b..e1225b9 100644
--- a/sortinghat/api.py
+++ b/sortinghat/api.py
@@ -46,7 +46,7 @@ from .db.model import MIN_PERIOD_DATE, MAX_PERIOD_DATE, \
     UniqueIdentity, Identity, Profile, Organization, Domain, Country, Enrollment, \
     MatchingBlacklist
 from .exceptions import AlreadyExistsError, NotFoundError, InvalidValueError
-
+from os import getenv
 
 logger = logging.getLogger(__name__)
 
@@ -1215,41 +1215,46 @@ def enrollments(db, uuid=None, organization=None, from_date=None, to_date=None):
         raise InvalidValueError("'from_date' %s cannot be greater than %s"
                                 % (from_date, to_date))
 
+    globalEnrollments = []
+    projectEnrollments = []
     enrollments = []
 
     with db.connect() as session:
-        query = session.query(Enrollment).\
-            join(UniqueIdentity, Organization).\
-            filter(Enrollment.start >= from_date,
-                   Enrollment.end <= to_date)
-
-        # Filter by uuid
+        uidentity = None
         if uuid:
             uidentity = find_unique_identity(session, uuid)
-
             if not uidentity:
                 raise NotFoundError(entity=uuid)
 
-            query = query.filter(Enrollment.uidentity == uidentity)
-
-        # Filter by organization
+        org = None
         if organization:
             org = find_organization(session, organization)
-
             if not org:
                 raise NotFoundError(entity=organization)
 
+        projectSlug = getenv('PROJECT_SLUG')
+        if not (projectSlug == None or projectSlug == ''):
+            query = session.query(Enrollment).join(UniqueIdentity, Organization).filter(Enrollment.start >= from_date, Enrollment.end <= to_date, Enrollment.project_slug == projectSlug)
+            if uidentity:
+                query = query.filter(Enrollment.uidentity == uidentity)
+            if org:
+                query = query.filter(Enrollment.organization == org)
+            projectEnrollments = query.order_by(UniqueIdentity.uuid, Organization.name, Enrollment.start, Enrollment.end).all()
+
+        query = session.query(Enrollment).join(UniqueIdentity, Organization).filter(Enrollment.start >= from_date, Enrollment.end <= to_date, Enrollment.project_slug == None)
+        if uidentity:
+            query = query.filter(Enrollment.uidentity == uidentity)
+        if org:
             query = query.filter(Enrollment.organization == org)
+        globalEnrollments = query.order_by(UniqueIdentity.uuid, Organization.name, Enrollment.start, Enrollment.end).all()
 
-        # Get the results
-        enrollments = query.order_by(UniqueIdentity.uuid,
-                                     Organization.name,
-                                     Enrollment.start,
-                                     Enrollment.end).all()
+        for rol in projectEnrollments:
+            enrollments.append(rol)
 
-        # Detach objects from the session
-        session.expunge_all()
+        for rol in globalEnrollments:
+            enrollments.append(rol)
 
+        session.expunge_all()
     return enrollments
 
 
