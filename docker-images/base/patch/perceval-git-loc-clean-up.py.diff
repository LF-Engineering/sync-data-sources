diff --git a/perceval/backends/core/git.py b/perceval/backends/core/git.py
index 5b93eed..e090875 100644
--- a/perceval/backends/core/git.py
+++ b/perceval/backends/core/git.py
@@ -529,6 +529,7 @@ class GitParser:
         self.commit = None
         self.commit_files = {}
         loc, pls = self.__get_stats()
+        self.__cleanup()
         self.total_lines_of_code = loc
         self.program_language_summary = pls
 
@@ -753,6 +754,11 @@ class GitParser:
             return repo.git_loc.get_stats()
         return 0, []
 
+    def __cleanup(self):
+        repo = self.stream.gi_frame.f_locals.get('self')
+        if repo:
+            repo.git_loc._clean()
+
 
 class EmptyRepositoryError(RepositoryError):
     """Exception raised when a repository is empty"""
diff --git a/perceval/utils.py b/perceval/utils.py
index acaa63f..57d8bf4 100644
--- a/perceval/utils.py
+++ b/perceval/utils.py
@@ -351,6 +351,43 @@ class GitLOC:
             return os.path.join(base_path, '{0}/{1}'.format(self.org_name, self.repo_name))
         return os.path.join(base_path, '{0}-{1}'.format(self.org_name, self.repo_name))
 
+    @staticmethod
+    def _get_repo_size(start_path=None):
+        total_size = 0
+        if start_path:
+            for dirpath, dirnames, filenames in os.walk(start_path):
+                for f in filenames:
+                    fp = os.path.join(dirpath, f)
+                    # skip if it is symbolic link
+                    if not os.path.islink(fp):
+                        total_size += os.path.getsize(fp)
+
+        return total_size
+
+    @staticmethod
+    def _get_size_format(size_bytes, factor=1024, suffix="B"):
+        """
+        Scale bytes to its proper byte format
+        e.g:
+            1253656 => '1.20MB'
+            1253656678 => '1.17GB'
+        """
+        for unit in ["", "K", "M", "G", "T", "P", "E", "Z"]:
+            if size_bytes < factor:
+                return "{0:.2f} {1}{2}".format(size_bytes, unit, suffix)
+            size_bytes /= factor
+        return "{0:.2f} Y{1}".format(size_bytes, suffix)
+
+    @staticmethod
+    def _should_be_delete(size_unit=None):
+        if size_unit:
+            size, unit = size_unit.split(' ')
+            if unit in ['B', 'KB']:
+                return True
+            elif unit == 'MB' and float(size) <= 200:
+                return True
+        return False
+
     @staticmethod
     def is_gitsource(host):
         if 'github.com' in host \
@@ -493,7 +530,7 @@ class GitLOC:
         except (RuntimeError, Exception) as cloe:
             logger.error("Git clone error %s ", str(cloe))
 
-    def _clean(self):
+    def _clean(self, force=False):
         cmd = ['rm', '-rf', self.repo_path]
         env = {
             'LANG': 'C',
@@ -501,8 +538,13 @@ class GitLOC:
         }
 
         try:
-            self._exec(cmd, env=env)
-            logger.debug("Git %s repository clean", self.repo_path)
+            size_bytes = self._get_repo_size(self.repo_path)
+            size = self._get_size_format(size_bytes)
+            if self._should_be_delete(size) or force:
+                self._exec(cmd, env=env)
+                logger.debug("Git %s repository clean", self.repo_path)
+            else:
+                logger.debug("Git %s repository clean skip", self.repo_path)
         except (RuntimeError, Exception) as cle:
             logger.error("Git clone error %s", str(cle))
 
