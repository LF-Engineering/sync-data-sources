Please provide secret values for each file in `./secrets/*.secret.example` saving it as `./secrets/*.secret` or specify them from the command line.

Please note that `vim` automatically adds new line to all text files, to remove it run `truncate -s -1` on a saved file.

List of secrets:
- File `secrets/SH_USER.secret` or --set `shUser=...` setup MariaDB admin user name.
- File `secrets/SH_HOST.env.secret` or --set `shHost=...` setup MariaDB host name.
- File `secrets/SH_PORT.env.secret` or --set `shPort=...` setup MariaDB port.
- File `secrets/SH_PASS.env.secret` or --set `shPass=...` setup MariaDB password.
- File `secrets/SH_DB.secret` or --set `shDB=...` setup MariaDB database.
- File `secrets/ES_URL.secret` or --set `esURL=...` setup ElasticSearch connection.
- File `secrets/SSAW_URL.secret` or --set `ssawURL=...` setup SSAW endpoint.
- File `secrets/ZIPPASS.secret` or --set `zipPass=...` fixtures unzip password (fixtures contain sensitive information so they're stored in password protected zip file inside the docker image).

To install:
- `helm install sds ./sds-helm --set deployEnv=test|prod`.

To upgrade:
- `helm upgrade sds ./sds-helm`.

You can install only selected templates, see `values.yaml` for detalis (refer to `skipXYZ` variables in comments), example:
- `helm install --dry-run --debug --generate-name ./sds-helm --set deployEnv=test,skipSecrets=1,skipCron=1,skipNamespace=1,skipPV=1`.
- Install debug pod: `helm install sds-debug ./sds-helm --set deployEnv=test,skipSecrets=1,skipCron=1,skipNamespace=1,skipPV=1,debugPod=1`.

Please note variables commented out in `./sds-helm/values.yaml`. You can either uncomment them or pass their values via `--set variable=name`.

Import company affiliations from cncf/devstats into GrimoireLab Sorting Hat database.

Other environment parameters:

- `SDS_MAXRETRY`/`sdsMaxRetry` - Try to run grimoire stack (perceval, p2o.py etc) that many times before reporting failure, default 3 (1 original and 2 more attempts).
- `SDS_DEBUG`/`sdsDebug` - Debug level: 0-no, 1-info, 2-verbose.
- `SDS_CMDDEBUG`/`sdsCmdDebug` - Commands execution Debug level: 0-no, 1-only output commands, 2-output commands and their output, 3-output full environment as well, default.
- `SDS_ST`/`sdsST` - force using single-threaded version.
- `SDS_NCPUS`/`sdsNCPUs` - set to override number of CPUs to run, this overwrites `SDS_ST`, default 0 (which means autodetect).
- `SDS_NCPUS_SCALE`/`sdsNCPUsScale` - set to boost autodetected number of CPUs, default 1.0
- `SDS_CTXOUT`/`sdsCtxOut` - output all context data (configuration struct).
- `SDS_SKIPTIME`/`sdsSkipTime` - do not output time with log messages.
- `SDS_ES_BULKSIZE`/`esBulkSize` - ElasticSearch bulk size when enriching data.
- `SDS_DRY_RUN`/`dryRun` - Run in dry-run mode, do not execute any grimoire stack command, report success instead.
- `SDS_DRY_RUN_CODE`/`dryRunCode` - When in dry-run mode, set fake grimoire command result exit code.
- `SDS_DRY_RUN_SECONDS`/`dryRunSeconds` - When in dry-run mode, set fake grimoire command running time in seconds.
- `SDS_TIMEOUT_SECONDS`/`timeoutSeconds` - if program didn't finished before this timeout (in seconds), finish it with exit code 2. Default 47h 45min (171900s).
- `SDS_TASK_TIMEOUT_SECONDS`/`taskTimeoutSeconds` - single task timeout (in seconds).
- `SDS_N_LONGEST`/`nLongest` - number of longest running tasks to display in stats, default 10.
- `SDS_STRIP_ERROR_SIZE`/`stripErrorSize` - error messages longer that this value will be stripped by half of this value from beginning and from end
- `SDS_SKIP_SH`/`skipSH` - do not use SortingHat.
- `SDS_SILENT`/`silent` - do not pass `-g` (debug) flag to `p2o.py` calls, makes output a lot less verbose.
- `SDS_SKIP_DATA`/`skipData` - do not run incremental data sync.
- `SDS_SKIP_AFFS`/`skipAffs` - do not re-enrich historical affiliations data.
- `SDS_SKIP_ALIASES`/`skipAliases` - do not create index aliases, do not attempt to drop unused aliases.
- `SDS_NO_MULTI_ALIASES`/`noMultiAliases` - alias names must be unique, so every alias can only point to a single index. If not set then single alias can point to multiple indices.
- `SDS_CLEANUP_ALIASES`/`cleanupAliases` - drop aliases before creating them, this can be used to clean existing aliases from some orphaned/no longer needed indexes.
- `SDS_SKIP_DROP_UNUSED`/`skipDropUnused` - do not drop unused indexes/aliases.
- `SDS_NO_INDEX_DROP`/`noIndexDrop` - do not drop unused indexes - display a warning instead.
- `SDS_SKIP_ES_DATA`/`skipEsData`  do not process "sdsdata" index at all (SDS state saved in ES).
- `SDS_SKIP_CHECK_FREQ`/`skipCheckFreq` - skip check sync frequency.
- `SDS_MAX_DELETE_TRIALS`/`maxDeleteTrials` - set maximum retries for delete by query.
- `SDS_SKIP_ES_LOG`/`skipEsLog`  do not store SDS logs in ES index "sdslog".

Multi node support:

- `SDS_NODE_HASH`/`nodeHash` to set multi node deployment (it will use hash function to distribute work across nodes without duplicating).
- `SDS_NODE_NUM`/`nodeNum` to specify number of nodes available. each will get about `1/N` of work.
- `SDS_NODE_IDX`/`nodeIdx` to specify which node index you're now deploying - you need to make N deployments, each for different node.
